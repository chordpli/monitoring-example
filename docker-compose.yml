version: "3"

services:

  loki:
    image: grafana/loki:3.0.0
    command: "-config.file=/etc/loki/config.yml"
    ports:
      - 3100:3100
    volumes:
      - ./config/loki/loki-config.yml:/etc/loki/config.yml
      - loki-data:/loki
    networks:
      - monitoring

  gateway:
    image: nginx:latest
    depends_on:
      - loki
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  1;
        
        error_log  /var/log/nginx/error.log warn;
        pid        /var/run/nginx.pid;
        
        events {
          worker_connections  1024;
        }
        
        http {
          resolver 127.0.0.11;
        
          server {
            listen 3101;
        
            location = / {
              return 200 'OK';
              auth_basic off;
            }
        
            location = /api/prom/push {
              proxy_pass       http://loki:3100;
            }

            location = /api/prom/tail {
              proxy_pass       http://loki:3100;
            }
        
            location = /loki/api/v1/push {
              proxy_pass       http://loki:3100;
            }
        
            location = /loki/api/v1/tail {
              proxy_pass       http://loki:3100;
            }
        
            location ~ /loki/api/.* {
              proxy_pass       http://loki:3100;
            }
        
            location /api/live/ws {
              proxy_pass http://localhost:3000;
              proxy_http_version 1.1;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
              proxy_set_header Host \$$host;
              proxy_set_header X-Real-IP \$$remote_addr;
              proxy_set_header X-Forwarded-For \$$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto \$$scheme;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3101:3101"
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    volumes:
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./config/grafana/grafana.ini:/etc/grafana/grafana.ini
      - grafana-data:/var/lib/grafana
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
          - name: Loki
            type: loki
            access: proxy
            url: http://gateway:3101
            jsonData:
              httpHeaderName1: "X-Scope-OrgID"
            secureJsonData:
              httpHeaderValue1: "tenant1"
        EOF
        /run.sh
    ports:
      - "3000:3000"
    networks:
      - monitoring

  monitoring-fastapi-a:
    container_name: monitoring-a
    hostname: monitoring-a
    build:
      context: .
      dockerfile: Dockerfile
    entrypoint: "uvicorn app.cmd.api:app --proxy-headers --port 8000 --host 0.0.0.0 --log-config /app/logging-a.yml"
    ports:
      - "8000:8000"
    volumes:
      - ./logs/monitoring-a:/var/log/containers/monitoring-a
      - ./config/logging-a.yml:/app/logging-a.yml
    networks:
      - monitoring

  monitoring-fastapi-b:
    container_name: monitoring-b
    hostname: monitoring-b
    build:
      context: .
      dockerfile: Dockerfile
    entrypoint: "uvicorn app.cmd.api:app --proxy-headers --port 8001 --host 0.0.0.0 --log-config /app/logging-b.yml"
    ports:
      - "8001:8001"
    volumes:
      - ./logs/monitoring-b:/var/log/containers/monitoring-b
      - ./config/logging-b.yml:/app/logging-b.yml
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - ./config/prometheus_data/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - monitoring

  promtail:
    image: grafana/promtail:2.5.0
    volumes:
      - ./logs:/var/log/containers/
      - ./config/promtail/promtail-config.yml:/etc/promtail/promtail-config.yml
    command: -config.file=/etc/promtail/promtail-config.yml
    networks:
      - monitoring

networks:
  monitoring:
    driver: bridge

volumes:
  prometheus-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./config/prometheus_data
  grafana-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./config/grafana
  loki-data:
  grafana-storage: { }
  promtail_data: { }
